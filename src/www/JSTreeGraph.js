function DrawTree(options){PrepareNode(options.RootNode);if(options.Layout=="Vertical"){PerformLayoutV(options.RootNode,options)}else{PerformLayoutH(options.RootNode,options)}options.Container.innerHTML="";DrawNode(options.RootNode,options.Container,options);DrawLines(options.RootNode,options.Container)}function DrawLines(node,container){if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){for(var j=0;j<node.Nodes.length;j++){if(node.ChildrenConnectorPoint.Layout=="Vertical")DrawLineV(container,node.ChildrenConnectorPoint,node.Nodes[j].ParentConnectorPoint);else DrawLineH(container,node.ChildrenConnectorPoint,node.Nodes[j].ParentConnectorPoint);DrawLines(node.Nodes[j],container)}}}function DrawLineH(container,startPoint,endPoint){var midY=(startPoint.Y+((endPoint.Y-startPoint.Y)/2)); DrawLineSegment(container,startPoint.X,startPoint.Y,startPoint.X,midY,1);var imsStartX=startPoint.X<endPoint.X?startPoint.X:endPoint.X;var imsEndX=startPoint.X>endPoint.X?startPoint.X:endPoint.X;DrawLineSegment(container,imsStartX,midY,imsEndX,midY,1);DrawLineSegment(container,endPoint.X,midY,endPoint.X,endPoint.Y,1)}function DrawLineV(container,startPoint,endPoint){var midX=(startPoint.X+((endPoint.X-startPoint.X)/2)); DrawLineSegment(container,startPoint.X,startPoint.Y,midX,startPoint.Y,1);var imsStartY=startPoint.Y<endPoint.Y?startPoint.Y:endPoint.Y;var imsEndY=startPoint.Y>endPoint.Y?startPoint.Y:endPoint.Y;DrawLineSegment(container,midX,imsStartY,midX,imsEndY,1);DrawLineSegment(container,midX,endPoint.Y,endPoint.X,endPoint.Y,1)}function DrawLineSegment(container,startX,startY,endX,endY,lineWidth){var lineDiv=document.createElement("div");lineDiv.style.top=startY+"px";lineDiv.style.left=startX+"px";if(startX==endX){lineDiv.style.width=lineWidth+"px";lineDiv.style.height=(endY-startY)+"px"}else{lineDiv.style.width=(endX-startX)+"px";lineDiv.style.height=lineWidth+"px"}lineDiv.className="NodeLine";container.appendChild(lineDiv)}function DrawNode(node,container,options){var nodeDiv=document.createElement("div");nodeDiv.style.top=node.Top+"px";nodeDiv.style.left=node.Left+"px";nodeDiv.style.width=node.Width+"px";nodeDiv.style.height=node.Height+"px";if(node.Collapsed){nodeDiv.className="NodeCollapsed"}else{nodeDiv.className="Node"}if(node.Class)nodeDiv.className=node.Class;if(node.Content)nodeDiv.innerHTML="<div class='NodeContent'>"+node.Content+"</div>";if(node.ToolTip)nodeDiv.setAttribute("title",node.ToolTip);nodeDiv.Node=node;if(options.OnNodeClick)nodeDiv.onclick=options.OnNodeClick;if(options.OnNodeDoubleClick)nodeDiv.ondblclick=options.OnNodeDoubleClick;nodeDiv.onmouseover=function(){};nodeDiv.onmouseout=function(){};container.appendChild(nodeDiv);if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){for(var i=0;i<node.Nodes.length;i++){DrawNode(node.Nodes[i],container,options)}}}function PerformLayoutV(node,options){var nodeHeight=options.Height;var nodeWidth=150;var nodeMarginLeft=35;var nodeMarginTop=10;var nodeTop=0;if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){for(var i=0;i<node.Nodes.length;i++){PerformLayoutV(node.Nodes[i],options)}}if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){var childrenHeight=(node.Nodes[node.Nodes.length-1].Top+node.Nodes[node.Nodes.length-1].Height)-node.Nodes[0].Top;nodeTop=(node.Nodes[0].Top+(childrenHeight/2))-(nodeHeight/2);if(node.LeftNode&&((node.LeftNode.Top+node.LeftNode.Height+nodeMarginTop)>nodeTop)){var newTop=node.LeftNode.Top+node.LeftNode.Height+nodeMarginTop;var diff=newTop-nodeTop;MoveBottom(node.Nodes,diff);nodeTop=newTop}}else{if(node.LeftNode)nodeTop=node.LeftNode.Top+node.LeftNode.Height+nodeMarginTop}node.Top=nodeTop;node.Left=(nodeMarginLeft*(node.Level+1))+(nodeWidth*(node.Level+1));node.Height=nodeHeight;node.Width=nodeWidth;var pointX=node.Left+nodeWidth;var pointY=nodeTop+(nodeHeight/2);node.ChildrenConnectorPoint={X:pointX,Y:pointY,Layout:"Vertical"};pointX=node.Left;pointY=nodeTop+(nodeHeight/2);node.ParentConnectorPoint={X:pointX,Y:pointY,Layout:"Vertical"}}function PerformLayoutH(node,options){var nodeHeight=options.Height;var nodeWidth=140;var nodeMarginLeft=30;var nodeMarginTop=50;var nodeLeft=0;if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){for(var i=0;i<node.Nodes.length;i++){PerformLayoutH(node.Nodes[i],options)}}if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){var childrenWidth=(node.Nodes[node.Nodes.length-1].Left+node.Nodes[node.Nodes.length-1].Width)-node.Nodes[0].Left;nodeLeft=(node.Nodes[0].Left+(childrenWidth/2))-(nodeWidth/2);if(node.LeftNode&&((node.LeftNode.Left+node.LeftNode.Width+nodeMarginLeft)>nodeLeft)){var newLeft=node.LeftNode.Left+node.LeftNode.Width+nodeMarginLeft;var diff=newLeft-nodeLeft;MoveRigth(node.Nodes,diff);nodeLeft=newLeft}}else{if(node.LeftNode)nodeLeft=node.LeftNode.Left+node.LeftNode.Width+nodeMarginLeft}node.Left=nodeLeft;node.Top=(nodeMarginTop*(node.Level+1))+(nodeHeight*(node.Level+1));node.Height=nodeHeight;node.Width=nodeWidth;var pointX=nodeLeft+(nodeWidth/2);var pointY=node.Top+nodeHeight;node.ChildrenConnectorPoint={X:pointX,Y:pointY,Layout:"Horizontal"};pointX=nodeLeft+(nodeWidth/2);pointY=node.Top;node.ParentConnectorPoint={X:pointX,Y:pointY,Layout:"Horizontal"}}function MoveRigth(nodes,distance){for(var i=0;i<nodes.length;i++){nodes[i].Left+=distance;if(nodes[i].ParentConnectorPoint)nodes[i].ParentConnectorPoint.X+=distance;if(nodes[i].ChildrenConnectorPoint)nodes[i].ChildrenConnectorPoint.X+=distance;if(nodes[i].Nodes){MoveRigth(nodes[i].Nodes,distance)}}}function MoveBottom(nodes,distance){for(var i=0;i<nodes.length;i++){nodes[i].Top+=distance;if(nodes[i].ParentConnectorPoint)nodes[i].ParentConnectorPoint.Y+=distance;if(nodes[i].ChildrenConnectorPoint)nodes[i].ChildrenConnectorPoint.Y+=distance;if(nodes[i].Nodes){MoveBottom(nodes[i].Nodes,distance)}}}function PrepareNode(node,level,parentNode,leftNode,rightLimits){if(level==undefined)level=0;if(parentNode==undefined)parentNode=null;if(leftNode==undefined)leftNode=null;if(rightLimits==undefined)rightLimits=new Array();node.Level=level;node.ParentNode=parentNode;node.LeftNode=leftNode;if((!node.Collapsed)&&node.Nodes&&node.Nodes.length>0){for(var i=0;i<node.Nodes.length;i++){var left=null;if(i==0&&rightLimits[level]!=undefined)left=rightLimits[level];if(i>0)left=node.Nodes[i-1];if(i==(node.Nodes.length-1))rightLimits[level]=node.Nodes[i];PrepareNode(node.Nodes[i],level+1,node,left,rightLimits)}}}
